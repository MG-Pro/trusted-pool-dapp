/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace PooledTemplate {
  export type ParticipantStruct = {
    account: PromiseOrValue<string>;
    share: PromiseOrValue<BigNumberish>;
    claimed: PromiseOrValue<BigNumberish>;
    description: PromiseOrValue<string>;
  };

  export type ParticipantStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    account: string;
    share: BigNumber;
    claimed: BigNumber;
    description: string;
  };
}

export interface TrustedPoolInterface extends utils.Interface {
  functions: {
    "createPooledContract(string,address,string,(address,uint256,uint256,string)[])": FunctionFragment;
    "getContractAddressesByCreator(address)": FunctionFragment;
    "getContractAddressesByParticipant(address)": FunctionFragment;
    "owner()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createPooledContract"
      | "getContractAddressesByCreator"
      | "getContractAddressesByParticipant"
      | "owner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createPooledContract",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PooledTemplate.ParticipantStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddressesByCreator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddressesByParticipant",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createPooledContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddressesByCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddressesByParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;

  events: {};
}

export interface TrustedPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TrustedPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPooledContract(
      _name: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _tokenName: PromiseOrValue<string>,
      _participants: PooledTemplate.ParticipantStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getContractAddressesByCreator(
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getContractAddressesByParticipant(
      _participants: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;
  };

  createPooledContract(
    _name: PromiseOrValue<string>,
    _tokenAddress: PromiseOrValue<string>,
    _tokenName: PromiseOrValue<string>,
    _participants: PooledTemplate.ParticipantStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getContractAddressesByCreator(
    _creator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getContractAddressesByParticipant(
    _participants: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createPooledContract(
      _name: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _tokenName: PromiseOrValue<string>,
      _participants: PooledTemplate.ParticipantStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    getContractAddressesByCreator(
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getContractAddressesByParticipant(
      _participants: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    createPooledContract(
      _name: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _tokenName: PromiseOrValue<string>,
      _participants: PooledTemplate.ParticipantStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getContractAddressesByCreator(
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractAddressesByParticipant(
      _participants: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createPooledContract(
      _name: PromiseOrValue<string>,
      _tokenAddress: PromiseOrValue<string>,
      _tokenName: PromiseOrValue<string>,
      _participants: PooledTemplate.ParticipantStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getContractAddressesByCreator(
      _creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractAddressesByParticipant(
      _participants: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
