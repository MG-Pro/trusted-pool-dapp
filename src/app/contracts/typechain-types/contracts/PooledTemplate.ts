/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace PooledTemplate {
  export type ParticipantStruct = {
    account: PromiseOrValue<string>;
    share: PromiseOrValue<BigNumberish>;
    claimed: PromiseOrValue<BigNumberish>;
    accrued: PromiseOrValue<BigNumberish>;
    description: PromiseOrValue<string>;
  };

  export type ParticipantStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    account: string;
    share: BigNumber;
    claimed: BigNumber;
    accrued: BigNumber;
    description: string;
  };
}

export interface PooledTemplateInterface extends utils.Interface {
  functions: {
    "claimTokens()": FunctionFragment;
    "getPoolData(uint256,uint256)": FunctionFragment;
    "setTokenAddress(address)": FunctionFragment;
    "tokenBalance()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimTokens"
      | "getPoolData"
      | "setTokenAddress"
      | "tokenBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolData",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalance",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PooledTemplate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PooledTemplateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPoolData(
      first: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        number,
        PooledTemplate.ParticipantStructOutput[]
      ] & {
        creator: string;
        name: string;
        tokenAddress: string;
        tokenName: string;
        tokenAmount: BigNumber;
        status: number;
        participants: PooledTemplate.ParticipantStructOutput[];
      }
    >;

    setTokenAddress(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  claimTokens(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPoolData(
    first: PromiseOrValue<BigNumberish>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      BigNumber,
      number,
      PooledTemplate.ParticipantStructOutput[]
    ] & {
      creator: string;
      name: string;
      tokenAddress: string;
      tokenName: string;
      tokenAmount: BigNumber;
      status: number;
      participants: PooledTemplate.ParticipantStructOutput[];
    }
  >;

  setTokenAddress(
    _tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    claimTokens(overrides?: CallOverrides): Promise<void>;

    getPoolData(
      first: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        number,
        PooledTemplate.ParticipantStructOutput[]
      ] & {
        creator: string;
        name: string;
        tokenAddress: string;
        tokenName: string;
        tokenAmount: BigNumber;
        status: number;
        participants: PooledTemplate.ParticipantStructOutput[];
      }
    >;

    setTokenAddress(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenBalance(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    claimTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPoolData(
      first: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTokenAddress(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenBalance(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPoolData(
      first: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTokenAddress(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
